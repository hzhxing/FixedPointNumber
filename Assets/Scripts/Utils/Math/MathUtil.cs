using System;

namespace Utils.Math
{
    public class MathUtil
    {
        public static bool IsInt32Overflow(long value)
        {
            return value < Int32.MinValue || value > Int32.MaxValue;
        }
        
        /// <summary>
        ///   <para>最大公约数  </para>
        /// </summary>
        public static int GetGreatestCommonDivisor(int a, int b)
        {
            if (a == 0 || b == 0)
            {
                throw new Exception("不能求0的最大公约数");
            }

            int max = a > b ? a : b;
            int min = a > b ? b : a;

            int remain = max % min;
            while (remain != 0)
            {
                max = min;
                min = remain;
                remain = max % min;
            }

            return min;
        }

        /// <summary>
        ///   <para>最小公倍数  </para>
        /// </summary>
        public static int GetLowestCommonMultiple(int a, int b)
        {
            if (a == 0 || b == 0)
            {
                throw new Exception("不能求0的最大公约数");
            }

            return a * b / GetGreatestCommonDivisor(a, b);
        }
        
        /// <summary>
        ///   <para>开根  </para>
        /// </summary>
        public static long Sqrt(long value)
        {
            if (value <= 0)
            {
                return 0;
            }
            
            int bit = 0;
            long num = value;
            while (num > 1)
            {
                num >>= 1;
                bit++;
            }

            int divBit = bit >> 1;
            
            long from = (1 << divBit);
            long to = (1 << (divBit + 1));
            
            long target;
            while (true)
            {
                long space = to - from;
                if (space <= 1)
                {
                    target = from;
                    break;
                }
                long v = from + (space >> 1);
                long sqr = v * v;
   
                if(sqr > value)
                {
                    to = v;
                }
                else if (sqr < value)
                {
                    from = v;
                }
                else
                {
                    target = v;
                    break;
                }
            }
            
            return target;
        }

        /// <summary>
        ///   <para>求平方  </para>
        /// </summary>
        public static long Sqr(long value)
        {
            return value * value;
        }

        private static int SCALE = 1000;
        private static int[] SIN = new int[]
        {
            0,17,34,52,69,87,104,121,139,156,173,190,207,224,241,258,275,292,309,325,342,358,374,390,
            406,422,438,453,469,484,499,515,529,544,559,573,587,601,615,629,642,656,669,681,694,707,
            719,731,743,754,766,777,788,798,809,819,829,838,848,857,866,874,882,891,898,906,913,920,
            927,933,939,945,951,956,961,965,970,974,978,981,984,987,990,992,994,996,997,998,999,999,
            1000,999,999,998,997,996,994,992,990,987,984,981,978,974,970,965,961,956,951,945,939,933,
            927,920,913,906,898,891,882,874,866,857,848,838,829,819,809,798,788,777,766,754,743,731,
            719,707,694,681,669,656,642,629,615,601,587,573,559,544,529,515,499,484,469,453,438,422,
            406,390,374,358,342,325,309,292,275,258,241,224,207,190,173,156,139,121,104,87,69,52,34,
            17,0,-17,-34,-52,-69,-87,-104,-121,-139,-156,-173,-190,-207,-224,-241,-258,-275,-292,
            -309,-325,-342,-358,-374,-390,-406,-422,-438,-453,-469,-484,-500,-515,-529,-544,-559,
            -573,-587,-601,-615,-629,-642,-656,-669,-681,-694,-707,-719,-731,-743,-754,-766,-777,
            -788,-798,-809,-819,-829,-838,-848,-857,-866,-874,-882,-891,-898,-906,-913,-920,-927,
            -933,-939,-945,-951,-956,-961,-965,-970,-974,-978,-981,-984,-987,-990,-992,-994,-996,
            -997,-998,-999,-999,-1000,-999,-999,-998,-997,-996,-994,-992,-990,-987,-984,-981,-978,
            -974,-970,-965,-961,-956,-951,-945,-939,-933,-927,-920,-913,-906,-898,-891,-882,-874,
            -866,-857,-848,-838,-829,-819,-809,-798,-788,-777,-766,-754,-743,-731,-719,-707,-694,
            -681,-669,-656,-642,-629,-615,-601,-587,-573,-559,-544,-529,-515,-500,-484,-469,-453,
            -438,-422,-406,-390,-374,-358,-342,-325,-309,-292,-275,-258,-241,-224,-207,-190,-173,
            -156,-139,-121,-104,-87,-69,-52,-34,-17
        };

        private static int[] COS = new int[]
        {
            1000,999,999,998,997,996,994,992,990,987,984,981,978,974,970,965,961,956,951,945,939,
            933,927,920,913,906,898,891,882,874,866,857,848,838,829,819,809,798,788,777,766,754,
            743,731,719,707,694,681,669,656,642,629,615,601,587,573,559,544,529,515,500,484,469,
            453,438,422,406,390,374,358,342,325,309,292,275,258,241,224,207,190,173,156,139,121,
            104,87,69,52,34,17,0,-17,-34,-52,-69,-87,-104,-121,-139,-156,-173,-190,-207,-224,-241,
            -258,-275,-292,-309,-325,-342,-358,-374,-390,-406,-422,-438,-453,-469,-484,-499,-515,
            -529,-544,-559,-573,-587,-601,-615,-629,-642,-656,-669,-681,-694,-707,-719,-731,-743,
            -754,-766,-777,-788,-798,-809,-819,-829,-838,-848,-857,-866,-874,-882,-891,-898,-906,
            -913,-920,-927,-933,-939,-945,-951,-956,-961,-965,-970,-974,-978,-981,-984,-987,-990,
            -992,-994,-996,-997,-998,-999,-999,-1000,-999,-999,-998,-997,-996,-994,-992,-990,-987,
            -984,-981,-978,-974,-970,-965,-961,-956,-951,-945,-939,-933,-927,-920,-913,-906,-898,
            -891,-882,-874,-866,-857,-848,-838,-829,-819,-809,-798,-788,-777,-766,-754,-743,-731,
            -719,-707,-694,-681,-669,-656,-642,-629,-615,-601,-587,-573,-559,-544,-529,-515,-500,
            -484,-469,-453,-438,-422,-406,-390,-374,-358,-342,-325,-309,-292,-275,-258,-241,-224,
            -207,-190,-173,-156,-139,-121,-104,-87,-69,-52,-34,-17,0,17,34,52,69,87,104,121,139,
            156,173,190,207,224,241,258,275,292,309,325,342,358,374,390,406,422,438,453,469,484,
            500,515,529,544,559,573,587,601,615,629,642,656,669,681,694,707,719,731,743,754,766,
            777,788,798,809,819,829,838,848,857,866,874,882,891,898,906,913,920,927,933,939,945,
            951,956,961,965,970,974,978,981,984,987,990,992,994,996,997,998,999,999
        };
        
        private static IntFloat mPI = new IntFloat(3141,SCALE);
        public static IntFloat PI
        {
            get { return mPI; }
        }

        public static IntFloat Sin(int value)
        {
            value = value % 360;
            if (value < 0)
            {
                value += 360;
            }
            return new IntFloat(SIN[value],SCALE);
        }

        public static IntFloat Cos(int value)
        {
            value = value % 360;
            if (value < 0)
            {
                value += 360;
            }
            return new IntFloat(COS[value],SCALE);
        }
    }
}